(ns beerpressure.db.beer-test
  (:require [clojure.test :refer :all]
            [beerpressure.handler :refer :all]
            [beerpressure.db.common-test :refer :all]))

(use-fixtures :once db-setup-with-logged-user-fixture)

(deftest test-resolve-beer
  (testing "beer(id: 1) - 1 brewery"
    (let [graphql-query (long-str "{"
                                  "  beer(id: 1) {"
                                  "    id"
                                  "    name"
                                  "    description"
                                  "    ibu"
                                  "    alcoholPercent"
                                  "    imagePath"
                                  "    breweries {"
                                  "      id"
                                  "      name"
                                  "      description"
                                  "      imagePath"
                                  "      tags {"
                                  "        id"
                                  "        name"
                                  "      }"
                                  "      rating"
                                  "    }"
                                  "    tags {"
                                  "      id"
                                  "      name"
                                  "    }"
                                  "    rating"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beer\": {"
                                      "      \"id\": 1,"
                                      "      \"name\": \"Molson Canadian\","
                                      "      \"description\": \"Une bière avec une feuille d'érable dessus...\","
                                      "      \"ibu\": 15,"
                                      "      \"alcoholPercent\": 5.0,"
                                      "      \"imagePath\": \"https:\\/\\/decrescente.net\\/images\\/suppliers\\/millercoors\\/molson\\/molson-canadian\\/canadian-bottle-lg.png\","
                                      "      \"breweries\": ["
                                      "        {"
                                      "          \"id\": 1,"
                                      "          \"name\": \"MolsonCoors\","
                                      "          \"description\": \"Ils ne font de la marde comme bière.\","
                                      "          \"imagePath\": \"https:\\/\\/images.radio-canada.ca\\/q_auto,w_1250\\/v1\\/ici-info\\/16x9\\/molson-montreal-notre-dame.jpg\","
                                      "          \"tags\": ["
                                      "            {"
                                      "              \"id\": 1,"
                                      "              \"name\": \"Industrielle\""
                                      "            }"
                                      "          ],"
                                      "          \"rating\": 1.5"
                                      "        }"
                                      "      ],"
                                      "      \"tags\": ["
                                      "        {"
                                      "          \"id\": 1,"
                                      "          \"name\": \"Industrielle\""
                                      "        },"
                                      "        {"
                                      "          \"id\": 4,"
                                      "          \"name\": \"Mauvais choix\""
                                      "        }"
                                      "      ],"
                                      "      \"rating\": 1.5"
                                      "    }"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beer(id: 5) - 2 breweries"
    (let [graphql-query (long-str "{"
                                  "  beer(id: 5) {"
                                  "    id"
                                  "    breweries {"
                                  "      id"
                                  "    }"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beer\": {"
                                      "      \"id\": 5,"
                                      "      \"breweries\": ["
                                      "        {"
                                      "          \"id\": 5"
                                      "        },"
                                      "        {"
                                      "          \"id\": 6"
                                      "        }"
                                      "      ]"
                                      "    }"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response)))))

(deftest test-resolve-beers
  (testing "beers(skip: 0, first: 1, orderBy: NAME, orderType: ASC, breweries: [], tags: [])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 1, orderBy: NAME, orderType: ASC, breweries: [], tags: []) {"
                                  "    id"
                                  "    name"
                                  "    description"
                                  "    ibu"
                                  "    alcoholPercent"
                                  "    imagePath"
                                  "    breweries {"
                                  "      id"
                                  "      name"
                                  "      description"
                                  "      imagePath"
                                  "      tags {"
                                  "        id"
                                  "        name"
                                  "      }"
                                  "      rating"
                                  "    }"
                                  "    tags {"
                                  "      id"
                                  "      name"
                                  "    }"
                                  "    rating"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 2,"
                                      "        \"name\": \"Blue\","
                                      "        \"description\": \"Une bière bleu... Étrange\","
                                      "        \"ibu\": 12,"
                                      "        \"alcoholPercent\": 5.0,"
                                      "        \"imagePath\": \"https:\\/\\/www.google.com\\/url?sa=i&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwir8pfW-7DbAhWr5oMKHX3oDtMQjRx6BAgBEAU&url=https%3A%2F%2Fwww.liquormarts.ca%2Fproduct%2Flabatt-blue%2F24-x-355-ml&psig=AOvVaw1n1N32iTLqUZu3QGlvQy7F&ust=1527891003844616\","
                                      "        \"breweries\": ["
                                      "          {"
                                      "            \"id\": 2,"
                                      "            \"name\": \"Labatt\","
                                      "            \"description\": \"Une copie de MolsonCoors en pire...\","
                                      "            \"imagePath\": \"https:\\/\\/upload.wikimedia.org\\/wikipedia\\/fr\\/4\\/40\\/Labatt.png\","
                                      "            \"tags\": ["
                                      "              {"
                                      "                \"id\": 1,"
                                      "                \"name\": \"Industrielle\""
                                      "              }"
                                      "            ],"
                                      "          \"rating\": 1.1666666666666667"
                                      "          }"
                                      "        ],"
                                      "        \"tags\": ["
                                      "          {"
                                      "            \"id\": 1,"
                                      "            \"name\": \"Industrielle\""
                                      "          },"
                                      "          {"
                                      "            \"id\": 4,"
                                      "            \"name\": \"Mauvais choix\""
                                      "          }"
                                      "        ],"
                                      "        \"rating\": 0.0"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 1, orderBy: NAME, orderType: DESC, breweries: [], tags: [])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 1, orderBy: NAME, orderType: DESC, breweries: [], tags: []) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 4"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 1, orderBy: NAME, orderType: ASC, breweries: [1], tags: [])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 1, orderBy: NAME, orderType: ASC, breweries: [1], tags: []) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 1"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 1, orderBy: NAME, orderType: DESC, breweries: [2], tags: [])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 1, orderBy: NAME, orderType: DESC, breweries: [2], tags: []) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 2"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 2, orderBy: NAME, orderType: ASC, breweries: [], tags: [1])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 2, orderBy: NAME, orderType: ASC, breweries: [], tags: [1]) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 2"
                                      "      },"
                                      "      {"
                                      "        \"id\": 1"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 2, orderBy: NAME, orderType: DESC, breweries: [], tags: [2])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 2, orderBy: NAME, orderType: DESC, breweries: [], tags: [2]) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 4"
                                      "      },"
                                      "      {"
                                      "        \"id\": 5"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 2, orderBy: NAME, orderType: ASC, breweries: [1,3], tags: [2])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 2, orderBy: NAME, orderType: ASC, breweries: [1,3], tags: [2]) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 3"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 2, orderBy: NAME, orderType: DESC, breweries: [1,3,4], tags: [2])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 2, orderBy: NAME, orderType: DESC, breweries: [1,3,4], tags: [2]) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 4"
                                      "      },"
                                      "      {"
                                      "        \"id\": 3"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 2, orderBy: RATING, orderType: ASC, breweries: [], tags: [])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 2, orderBy: RATING, orderType: ASC, breweries: [], tags: []) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 2"
                                      "      },"
                                      "      {"
                                      "        \"id\": 1"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 2, orderBy: RATING, orderType: DESC, breweries: [], tags: [])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 2, orderBy: RATING, orderType: DESC, breweries: [], tags: []) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 4"
                                      "      },"
                                      "      {"
                                      "        \"id\": 5"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 2, orderBy: RATING, orderType: ASC, breweries: [1,2], tags: [])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 2, orderBy: RATING, orderType: ASC, breweries: [1,2], tags: []) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 2"
                                      "      },"
                                      "      {"
                                      "        \"id\": 1"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 2, orderBy: RATING, orderType: DESC, breweries: [2,3], tags: [])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 2, orderBy: RATING, orderType: DESC, breweries: [2,3], tags: []) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 3"
                                      "      },"
                                      "      {"
                                      "        \"id\": 2"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 2, orderBy: RATING, orderType: ASC, breweries: [], tags: [1])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 2, orderBy: RATING, orderType: ASC, breweries: [], tags: [1]) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 2"
                                      "      },"
                                      "      {"
                                      "        \"id\": 1"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 2, orderBy: RATING, orderType: DESC, breweries: [], tags: [2])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 2, orderBy: RATING, orderType: DESC, breweries: [], tags: [2]) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 4"
                                      "      },"
                                      "      {"
                                      "        \"id\": 5"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 2, orderBy: RATING, orderType: ASC, breweries: [1,3,5], tags: [2,3])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 2, orderBy: RATING, orderType: ASC, breweries: [1,3,5], tags: [2,3]) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 3"
                                      "      },"
                                      "      {"
                                      "        \"id\": 5"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response))))
  (testing "beers(skip: 0, first: 2, orderBy: RATING, orderType: DESC, breweries: [1,3,4], tags: [1,2])"
    (let [graphql-query (long-str "{"
                                  "  beers(skip: 0, first: 2, orderBy: RATING, orderType: DESC, breweries: [1,3,4], tags: [1,2]) {"
                                  "    id"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      "  \"data\": {"
                                      "    \"beers\": ["
                                      "      {"
                                      "        \"id\": 4"
                                      "      },"
                                      "      {"
                                      "        \"id\": 3"
                                      "      }"
                                      "    ]"
                                      "  }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response)))))

(deftest test-resolve-beer-review
  (testing "beerReview(idBeerReview: 6)"
    (let [graphql-query (long-str "{"
                                  "  beerReview(idBeerReview: 6) {"
                                  "    idBeerReview"
                                  "    cip"
                                  "    idBeer"
                                  "    title"
                                  "    content"
                                  "    imagePath"
                                  "    rating"
                                  "    time"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      " \"data\": {"
                                      "   \"beerReview\": {"
                                      "     \"idBeerReview\": 6,"
                                      "     \"cip\": \"pele1704\","
                                      "     \"idBeer\": 4,"
                                      "     \"title\": \"Tu as raison Andy!!\","
                                      "     \"content\": \"Damn... c'est un review, pas un commentaire...\","
                                      "     \"imagePath\": \"https:\\/\\/www.google.com\\/url?sa=i&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwjn1Pr_wLPbAhXKtlkKHX7EBJAQjRx6BAgBEAU&url=http%3A%2F%2Fknowyourmeme.com%2Fphotos%2F56807-fail-epic-fail&psig=AOvVaw3HfgoRpGtV9HRR5-0cLFJ0&ust=1527978321220516\","
                                      "     \"rating\": 4.0,"
                                      "     \"time\": \"2018-06-10 10:00:05.0\""
                                      "   }"
                                      " }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response)))))

(deftest test-resolve-beer-reviews
  (testing "beerReviews(first: 3, skip: 4)"
    (let [graphql-query (long-str "{"
                                  "  beerReviews(first: 3, skip: 4) {"
                                  "    idBeerReview"
                                  "    cip"
                                  "    idBeer"
                                  "    title"
                                  "    content"
                                  "    imagePath"
                                  "    rating"
                                  "    time"
                                  "  }"
                                  "}")
          expected-response (long-str "{"
                                      " \"data\": {"
                                      "   \"beerReviews\": ["
                                      "     {"
                                      "       \"idBeerReview\": 5,"
                                      "       \"cip\": \"parp2009\","
                                      "       \"idBeer\": 1,"
                                      "       \"title\": \"Un autre truc pas bon!\","
                                      "       \"content\": \"CE N'EST PAS BON...\","
                                      "       \"imagePath\": null,"
                                      "       \"rating\": 2.0,"
                                      "       \"time\": \"2018-06-10 10:00:04.0\""
                                      "     },"
                                      "     {"
                                      "       \"idBeerReview\": 6,"
                                      "       \"cip\": \"pele1704\","
                                      "       \"idBeer\": 4,"
                                      "       \"title\": \"Tu as raison Andy!!\","
                                      "       \"content\": \"Damn... c'est un review, pas un commentaire...\","
                                      "       \"imagePath\": \"https:\\/\\/www.google.com\\/url?sa=i&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwjn1Pr_wLPbAhXKtlkKHX7EBJAQjRx6BAgBEAU&url=http%3A%2F%2Fknowyourmeme.com%2Fphotos%2F56807-fail-epic-fail&psig=AOvVaw3HfgoRpGtV9HRR5-0cLFJ0&ust=1527978321220516\","
                                      "       \"rating\": 4.0,"
                                      "       \"time\": \"2018-06-10 10:00:05.0\""
                                      "     },"
                                      "     {"
                                      "       \"idBeerReview\": 7,"
                                      "       \"cip\": \"royj1933\","
                                      "       \"idBeer\": 4,"
                                      "       \"title\": \"Époustouflant!!!\","
                                      "       \"content\": \"Je n'ai pas d'autre\","
                                      "       \"imagePath\": null,"
                                      "       \"rating\": 5.0,"
                                      "       \"time\": \"2018-06-10 10:00:06.0\""
                                      "     }"
                                      "   ]"
                                      " }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response)))))

(deftest test-resolve-beer-review-comment
  (testing "beerReviewComment(idBeerReviewComment: 1"
    (let [graphql-query (long-str "{"
                                  " beerReviewComment(idBeerReviewComment: 1) {"
                                  "   idBeerReviewComment"
                                  "   idBeerReview"
                                  "   cip"
                                  "   content"
                                  "   time"
                                  " }"
                                  "}")
          expected-response (long-str "{"
                                      " \"data\": {"
                                      "   \"beerReviewComment\": {"
                                      "     \"idBeerReviewComment\": 1,"
                                      "     \"idBeerReview\": 1,"
                                      "     \"cip\": \"pele1704\","
                                      "     \"content\": \"Je suis d'accord avec toi!\","
                                      "     \"time\": \"2018-06-10 10:00:10.0\""
                                      "   }"
                                      " }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response)))))

(deftest test-resolve-beer-review-comments
  (testing "beerReviewComments(idBeerReview: 3, first: 10, skip: 0)"
    (let [graphql-query (long-str "{"
                                  " beerReviewComments(idBeerReview: 3, first: 10, skip: 0) {"
                                  "   idBeerReviewComment"
                                  "   idBeerReview"
                                  "   cip"
                                  "   content"
                                  "   time"
                                  " }"
                                  "}")
          expected-response (long-str "{"
                                      " \"data\": {"
                                      "   \"beerReviewComments\": ["
                                      "     {"
                                      "       \"idBeerReviewComment\": 7,"
                                      "       \"idBeerReview\": 3,"
                                      "       \"cip\": \"royj1933\","
                                      "       \"content\": \"C'est nice les soirée entre boux! Je fais de la crème brulée\","
                                      "       \"time\": \"2018-06-10 10:00:16.0\""
                                      "     },"
                                      "     {"
                                      "       \"idBeerReviewComment\": 6,"
                                      "       \"idBeerReview\": 3,"
                                      "       \"cip\": \"alig2503\","
                                      "       \"content\": \"C'est vraiment bon ça!!!\","
                                      "       \"time\": \"2018-06-10 10:00:15.0\""
                                      "     },"
                                      "     {"
                                      "       \"idBeerReviewComment\": 3,"
                                      "       \"idBeerReview\": 3,"
                                      "       \"cip\": \"mahm1904\","
                                      "       \"content\": \"Peut-être que j'aimerais ça!\","
                                      "       \"time\": \"2018-06-10 10:00:12.0\""
                                      "     }"
                                      "   ]"
                                      " }"
                                      "}")
          response (execute-graphql-query graphql-query)]
      (is (is-data-equal response expected-response)))))
